{"version":3,"file":"index.esm.js","sources":["../src/SecureTextInput.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport { useState, useEffect, useRef, ChangeEvent, FC } from \"react\";\r\n\r\nexport type SecureTextInputProps = {\r\n  value?: string;\r\n  onChange?: (sanitizedValue: string) => void;\r\n  allowedChars?: RegExp;\r\n  maxLength?: number;\r\n  sanitize?: (input: string) => string;\r\n  placeholder?: string;\r\n  className?: string;\r\n  id: string\r\n}\r\n\r\nconst defaultSanitize = (input: string) => input.replace(/[<>/'\"\\\\]/g, \"\"); // Remove potential XSS characters\r\n\r\nconst SecureTextInput: FC<SecureTextInputProps> = ({\r\n  value = \"\",\r\n  onChange,\r\n  allowedChars = /^[a-zA-Z0-9\\s]*$/, // Allow alphanumeric and spaces\r\n  maxLength = 255,\r\n  sanitize = defaultSanitize,\r\n  placeholder = \"Enter text...\",\r\n  className = \"\",\r\n  id,\r\n}) => {\r\n  const [inputValue, setInputValue] = useState(value);\r\n  const inputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    setInputValue(value);\r\n  }, [value]);\r\n\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    let newValue = event.target.value;\r\n\r\n    newValue = newValue.split(\"\").filter((char) => allowedChars.test(char)).join(\"\");\r\n\r\n    newValue = sanitize(newValue).slice(0, maxLength); // Sanitize & enforce max length\r\n\r\n    if (newValue !== inputValue) {\r\n      setInputValue(newValue);\r\n      onChange?.(newValue);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <input\r\n      ref={inputRef}\r\n      type=\"text\"\r\n      value={inputValue}\r\n      onChange={handleChange}\r\n      placeholder={placeholder}\r\n      className={className}\r\n      id={id}\r\n      aria-label={placeholder}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SecureTextInput;\r\n"],"names":["defaultSanitize","input","replace","SecureTextInput","_a","_b","value","onChange","_c","allowedChars","_d","maxLength","_e","sanitize","_f","placeholder","_g","className","id","_h","useState","inputValue","setInputValue","inputRef","useRef","useEffect","_jsx","ref","type","event","newValue","target","split","filter","char","test","join","slice"],"mappings":"oGAcA,IAAMA,EAAkB,SAACC,GAAkB,OAAAA,EAAMC,QAAQ,aAAc,KAEjEC,EAA4C,SAACC,GACjD,IAAAC,EAAAD,EAAAE,MAAAA,OAAK,IAAAD,EAAG,GAAEA,EACVE,EAAQH,EAAAG,SACRC,EAAAJ,EAAAK,aAAAA,OAAY,IAAAD,EAAG,mBAAkBA,EACjCE,EAAAN,EAAAO,UAAAA,OAAS,IAAAD,EAAG,IAAGA,EACfE,EAAAR,EAAAS,SAAAA,OAAW,IAAAD,EAAAZ,EAAeY,EAC1BE,EAA6BV,EAAAW,YAA7BA,OAAc,IAAAD,EAAA,gBAAeA,EAC7BE,EAAcZ,EAAAa,UAAdA,OAAS,IAAAD,EAAG,GAAEA,EACdE,EAAEd,EAAAc,GAEIC,EAA8BC,EAASd,GAAtCe,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAC1BI,EAAWC,EAAgC,MAEjDC,GAAU,WACRH,EAAchB,EAChB,GAAG,CAACA,IAeJ,OACEoB,EAAA,QAAA,CACEC,IAAKJ,EACLK,KAAK,OACLtB,MAAOe,EACPd,SAlBiB,SAACsB,GACpB,IAAIC,EAAWD,EAAME,OAAOzB,MAE5BwB,EAAWA,EAASE,MAAM,IAAIC,QAAO,SAACC,GAAS,OAAAzB,EAAa0B,KAAKD,EAAK,IAAEE,KAAK,KAE7EN,EAAWjB,EAASiB,GAAUO,MAAM,EAAG1B,MAEtBU,IACfC,EAAcQ,GACdvB,SAAAA,EAAWuB,GAEf,EAQIf,YAAaA,EACbE,UAAWA,EACXC,GAAIA,EAAE,aACMH,GAGlB"}